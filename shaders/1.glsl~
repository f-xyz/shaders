uniform float time;
varying vec3 p;

void main() {
    float a = 0.2;
    p = position;
    //p.x += a*cos(time*0.5 + p.y/25.0);
    //p.y += a*sin(time*0.5 + p.x/25.0);
    //p.x += a*sin(time) + a*cos(time);
    gl_Position = projectionMatrix * modelViewMatrix * vec4(p, 1.0);
}

/////

uniform float time;
uniform vec2 resolution;
varying vec3 p;

float world(vec2 v, vec2 speed, float i) {
    vec2 xy = gl_FragCoord.xy;
    float a = atan(xy.x, xy.y);
    
    float size = 50.;// + 50.*sin(time+1.57*i);
    vec2  pos = vec2(
        v.x + resolution.x/2. + time*speed.x - size, 
        v.y + resolution.y/2. + time*speed.y - size
    );
   
    float modX = mod(pos.x, resolution.x);
    float modY = mod(pos.y, resolution.y);
    
    float hopsX = floor(pos.x / resolution.x);
    float hopsY = floor(pos.y / resolution.y);
    
    if (mod(hopsX, 2.) == 0.) {
        pos.x = modX;
    } else {
        pos.x = resolution.x - modX;
    }
    
    if (mod(hopsY, 2.) == 0.) {
        pos.y = modY;
    } else {
        pos.y = resolution.y - modY;
    }
    
    float world = abs(length(vec2(xy.x-pos.x, xy.y-pos.y)) - size);
    float width = 20.;

    return width - world;
}

float noize(vec2 seed) {
    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

void main() {

    vec4 px = vec4(0., 0., 0., 1.);
    vec2 coord = vec2(gl_FragCoord);

    // clear
    gl_FragColor = vec4(0., 0., 0., 1.);

    // draw
    for (float i = 0.; i < 10.; i++) {
    
        float f = world(
            vec2(resolution.x * i / 8.,
                 resolution.y * i / 8.),
            vec2(resolution.x * i / 600., 
                 resolution.y * i / 600.),
            i
        );
    
        if (f > 0.) { 
            px += f / 40. * vec4(
                noize(coord) * sin(time / (i+1.)            ) / 2. + 0.5,
                noize(coord) * sin(time / (i+1.) / 2.       ) / 2. + 0.5,
                noize(coord) * sin(time / (i+1.) / 3. + 3.14) / 2. + 0.5,
                1.
            );
        }
    }
    
    gl_FragColor = px;
}
